import { ActiveChannel, EndUserDataService } from "@app/functions/bot-engine";
import { IVROutgoingMessage } from "./ivr-incoming-message.interface";
import { HandlerTools } from "@iote/cqrs";
import { isOutputBlock, IVRStoryBlock } from "@app/model/convs-mgr/stories/blocks/main";
import { EndUser } from "@app/model/convs-mgr/conversations/chats";
import { Message, MessageTemplateConfig, TemplateMessageParams } from "@app/model/convs-mgr/conversations/messages";
import { PlayService } from "./ivr-play.service";
import { GatherService } from "./ivr-gather.service";
import TwiML from "twilio/lib/twiml/TwiML";

/**
 * Class that represents an IVR Active Channel, providing services for playing audio 
 * and gathering user input through the IVR system.
 * @implements {ActiveChannel}
 */
export class IVRActiveChannel implements ActiveChannel {
    channel: any;
    endUserService: EndUserDataService;

    constructor(private _tools: HandlerTools, channel: any) {
        this.channel = channel;
        this.endUserService = new EndUserDataService(_tools, channel.orgId);
    }

    /**
     * Retrieves the media file for the IVR channel.
     * @param {string} mediaId - The ID of the media file to retrieve.
     * @param {string} mime_type - The MIME type of the media file.
     * @throws Throws an error if the method is not implemented.
     */
    getMediaFile(mediaId: string, mime_type: string) {
        throw new Error("Method not implemented.");
    }

    /**
     * Parses a message template and replaces the parameters.
     * @param {MessageTemplateConfig} templateConfig - The template configuration object.
     * @param {TemplateMessageParams[]} params - Parameters to inject into the template.
     * @param {string} phoneNumber - The phone number to send the message to.
     * @param {Message} message - The message object.
     * @throws Throws an error if the method is not implemented.
     */
    parseOutMessageTemplate(templateConfig: MessageTemplateConfig, params: TemplateMessageParams[], phoneNumber: string, message: Message) {
        throw new Error("Method not implemented.");
    }

    /**
     * Parses an outgoing IVR story block message to be sent to the user.
     * @param {IVRStoryBlock} storyBlock - The IVR story block containing the message details.
     * @param {EndUser} endUser - The end user receiving the message.
     * @returns The parsed message payload.
     */
    parseOutMessage(storyBlock: IVRStoryBlock, endUser: EndUser) {
        const outgoingMessagePayload = storyBlock;
        return outgoingMessagePayload;
    }

    /**
     * Parses a standard outgoing message.
     * @param {Message} message - The message object containing end user and content details.
     * @returns {Promise<any>} Parsed standard message object.
     */
    async parseOutStandardMessage(message: Message) {
        const phone = message.endUserPhoneNumber;
        return {};
    }

    /**
     * Sends the outgoing message through the IVR system.
     * If the block is an output block, it plays the audio file.
     * If not, it gathers input from the user after playing the audio.
     * @param {IVRStoryBlock} payload - The story block containing message details like audio URL and block type.
     * @returns {Promise<TwiML>} TwiML response generated by the Play or Gather service.
     */
    async send(payload: IVRStoryBlock): Promise<TwiML> {
        try {
            const playService = new PlayService();
            const gatherService = new GatherService();

            // If it's an output block, play the audio file
            if (isOutputBlock(payload.type)) {
                if (payload.audioUrl) {
                    playService.playAudio(payload.audioUrl);
                }
                console.log("Playing audio for output block", payload);
                return playService.getTwiml();
            } 
            // If it's not an output block, gather input after playing audio
            else {
                if (payload.audioUrl) {
                    gatherService.gatherWithPlay(payload.audioUrl, 1);
                }
                console.log("Gathering input after audio", payload);
                return gatherService.getTwiml();
            }
        } catch (error) {
            console.error("Failed to send IVR message:", error);
            throw error; // Re-throw error to ensure proper error handling
        }
    }

    /**
     * Handles incoming IVR messages from the user (e.g., DTMF inputs).
     * @param {any} payload - Incoming message payload (e.g., user inputs like DTMF digits).
     * @returns {Promise<string>} XML response to be sent back to the IVR system.
     */
    async handleIncoming(payload: any): Promise<string> {
        return '<Response><Say>Processing your input</Say></Response>';
    }
}
